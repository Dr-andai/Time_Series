eeg_variables <- eeg[-15, ]
View(eeg_variables)
# drop the eyeDetection column
eeg_variables <- eeg[, -15]
View(eeg_variables)
summary(eeg)
install.packages("rstatix")
get_summary_stats(eeg)
# EEG
library("rstatix")
get_summary_stats(eeg)
# correlation among features
corr_eeg <- cor(egg_variables)
# correlation among features
corr_eeg <- cor(eeg_variables)
View(bias.unemp)
View(corr_eeg)
round(corr_eeg, 2)
View(corr_eeg)
corr_eeg <- round(corr_eeg, 2)
View(corr_eeg)
# plot with pairs
pairs(corr_eeg)
ggcorrplot(corr_eeg)
install.packages("ggcorrplot")
library("ggcorrplot")
ggcorrplot(corr_eeg)
eeg <- import("EEG/EEG Eye State.arff")
library("rio")
eeg <- import("EEG/EEG Eye State.arff")
View(eeg)
names(eeg)
# DATA ANALYSIS
# dropping the "eye detection" column
eeg_variables <- eeg[, -15]
View(eeg_variables)
# STATS
describe(eeg_variables)
# STATS
summart(eeg_variables)
# STATS
summary(eeg_variables)
# STATS
get_summary_stats(eeg_variables)
library("rstatix")
# STATS
get_summary_stats(eeg_variables)
# STATS
eeg_stats <- get_summary_stats(eeg_variables)
View(eeg_stats)
library("tidyverse")
library("dplyr")
## -visualize on the summary stats
# visualize max col
class(egg_stats$max)
## -visualize on the summary stats
# visualize max col
class(eeg_stats$max)
eeg_stats %>%
ggplot(aes(max,variable))+
geom_bar()
eeg_stats %>%
ggplot(aes(max,variable))+
geom_point()
eeg_stats %>%
ggplot(aes(max,variable))+
geom_point()+
geom_line()
# correlation matrix
corr_eeg <- corr(eeg_variables)
# correlation matrix
corr_eeg <- cor(eeg_variables)
View(corr_eeg)
corr_eeg <- round(corr_eeg, 2)
View(corr_eeg)
library("corrplot")
corrplot(corr_eeg)
pairs(corr_eeg)
pairs(corr_eeg)
corr_eeg$label <- eeg$eyeDetection
# correlation matrix
corr_eeg <- cor(eeg_variables)
corr_eeg <- round(corr_eeg, 2)
corr_eeg <- as.data.frame(corr_eeg)
corr_eeg$label <- eeg$eyeDetection
View(corr_eeg)
prcomp(eeg_variables)
eeg_prcom <- prcomp(eeg_variables)
View(eeg_prcom)
eeg_prcomp <- prcomp(eeg_variables)
eeg_prcomp <- as.data.frame(eeg_prcomp)
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
eeg_prcomp <- as.data.frame(eeg_prcomp$x)
View(eeg_prcomp)
eeg_prcomp$label <- eeg$eyeDetection
View(eeg_prcomp)
plot(eeg_prcomp$PC1,
PC$PC2,
eeg_prcomp = PC$Label,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$PC2,
col = PC$Label,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$PC2,
col = eeg_prcomp$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = eeg_prcomp$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = eeg_prcomp$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = eeg_prcomp$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
eeg_prcomp <- as.data.frame(eeg_prcomp$x)
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
eeg_prcomp <- as.data.frame(eeg_prcomp$x)
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
summary(eeg_prcomp)
explained_variance_ratio <- summary(eeg_prcomp)[["importance"]]['Proportion of Variance',]
explained_variance_ratio <- summary(eeg_prcomp)
## -visualize on the summary stats
# visualize max col
eeg_stats %>%
ggplot(aes(variable,max))+
geom_point()
library("rio")
library("rstatix")
library("tidyverse")
library("dplyr")
eeg <- import("EEG/EEG Eye State.arff")
names(eeg)
# dropping the "eye detection" column
eeg_variables <- eeg[, -15]
# STATS
eeg_stats <- get_summary_stats(eeg_variables)
## -visualize on the summary stats
# visualize max col
eeg_stats %>%
ggplot(aes(variable,max))+
geom_point()
# correlation matrix
corr_eeg <- cor(eeg_variables)
corr_eeg <- round(corr_eeg, 2)
library("corrplot")
corrplot(corr_eeg)
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
eeg_prcomp <- as.data.frame(eeg_prcomp$x)
View(eeg_prcomp)
explained_variance_ratio <- summary(eeg_prcomp)
eeg_prcomp$label <- eeg$eyeDetection
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="PC2")
qplot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="AF3")
library("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(corr_eeg, histogram=TRUE, pch=19)
long_unemp[350:400, plot(Year, Rate,
col = 1, lwd=2,type='b')]
library("rio")
# library('tidyverse')
library("zoo")
library("data.table")
unemp <- import("Unemployment/unemployment.xlsx")
# convert to long
long_unemp <- unemp %>%
pivot_longer(
cols = 2:13,
names_to = "Months",
values_to = "Rate"
)
# convert to long
long_unemp <- unemp %>%
pivot_longer(
cols = 2:13,
names_to = "Months",
values_to = "Rate"
)
# change data frame to data.table
long_unemp <- data.table(long_unemp)
# convert column to date
long_unemp[, Year := as.Date(Year)]
setkey(long_unemp, Year)
## generate data set where data is randomly missing
rand.long_unemp.idx <- sample(1:nrow(long_unemp), .1*nrow(long_unemp))
rand.long_unemp <- long_unemp[-rand.long_unemp.idx]
## generate data set where data is more likely
## to be missing when unemployment is high
high.long_unemp.idx <- which(long_unemp$Rate > 8)
num.to.select <- .2 * length(high.long_unemp.idx)
high.long_unemp.idx <- sample(high.long_unemp.idx,)
bias.long_unemp <- long_unemp[-high.long_unemp.idx]
##
all.dates <- seq(long_unemp$Year[1], tail(long_unemp$Year, 1), "months")
rand.long_unemp = rand.long_unemp[J(all.dates), roll=0]
bias.long_unemp = bias.long_unemp[J(all.dates), roll=0]
rand.long_unemp[, rpt := is.na(Rate)]
## here we label the missing data for easy plotting
rand.long_unemp[, impute.ff := na.locf(Rate, na.rm = FALSE)]
bias.long_unemp[, impute.ff := na.locf(Rate, na.rm = FALSE)]
long_unemp[350:400, plot(Year, Rate,
col = 1, lwd=2,type='b')]
rand.long_unemp[, impute.rm.nolookahead := rollaplly(c(NA,NA,Rate),3,
function(x){
if(!is.na(x[3]))x[3] else mean(x, na.rm = T)
})]
# library('tidyverse')
library("zoo")
rand.long_unemp[, impute.rm.nolookahead := rollaplly(c(NA,NA,Rate),3,
function(x){
if(!is.na(x[3]))x[3] else mean(x, na.rm = T)
})]
rand.long_unemp[, impute.rm.nolookahead := rollapply(c(NA,NA,Rate),3,
function(x){
if(!is.na(x[3]))x[3] else mean(x, na.rm = T)
})]
library("rio")
library("rstatix")
library("tidyverse")
library("dplyr")
eeg <- import("EEG/EEG Eye State.arff")
names(eeg)
# DATA ANALYSIS
# dropping the "eye detection" column
eeg_variables <- eeg[, -15]
# STATS
eeg_stats <- get_summary_stats(eeg_variables)
## -visualize on the summary stats
# visualize max col
eeg_stats %>%
ggplot(aes(variable,max))+
geom_point()
# correlation matrix
corr_eeg <- cor(eeg_variables)
corr_eeg <- round(corr_eeg, 2)
library("corrplot")
corrplot(corr_eeg)
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
eeg_prcomp <- as.data.frame(eeg_prcomp$x)
View(eeg_prcomp)
eeg_prcomp$label <- eeg$eyeDetection
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
xlab="PC1",
ylab="AF3")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = "eeg_prcomp$label"
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = "eeg_prcomp$label",
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
View(eeg_prcomp)
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = "eeg_prcomp$label",
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = eeg_prcomp$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
legend("bottomright",
legend = levels(eeg_prcomp$label),
col = seq_along(levels(eeg_prcomp$label)),
pch = 19)
plot(eeg_prcomp$PC1,
eeg_prcomp$AF3,
col = eeg_prcomp$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
legend("bottomright",
legend = levels(eeg_prcomp$label),
col = seq_along(levels(eeg_prcomp$label)),
pch = 19)
library("rio")
library("rstatix")
library("tidyverse")
library("dplyr")
eeg <- import("EEG/EEG Eye State.arff")
names(eeg)
# DATA ANALYSIS
# Eye Closed
eye_closed <- eeg[eeg$eyeDetection == 1, ]
View(eye_closed)
# Eye Open
eye_open <- eeg[eeg$eyeDetection == 0, ]
# dropping the "eye detection" column
eye_closed <- eye_closed[, -15]
eye_open <- eye_open[, -15]
# STATS
eeg_closed_stats <- get_summary_stats(eye_closed)
eye_open_stats <- get_summary_stats(eye_open)
## -visualize on the summary stats
# visualize max col
eeg_closed_stats %>%
ggplot(aes(variable,max))+
geom_point()
eeg_open_stats %>%
ggplot(aes(variable,max))+
geom_point()
eye_open_stats <- get_summary_stats(eye_open)
eeg_open_stats %>%
ggplot(aes(variable,max))+
geom_point()
eye_closed_stats <- get_summary_stats(eye_closed)
eye_open_stats <- get_summary_stats(eye_open)
eye_open_stats %>%
ggplot(aes(variable,max))+
geom_point()
## -visualize on the summary stats
# visualize max col
eye_closed_stats %>%
ggplot(aes(variable,max))+
geom_point()
eye_open_stats %>%
ggplot(aes(variable,max))+
geom_point()
# dropping the "eye detection" column
eeg_variables <- eeg[, -15]
# correlation matrix
corr_eeg <- cor(eeg_variables)
corr_eeg <- round(corr_eeg, 2)
library("corrplot")
corrplot(corr_eeg)
summary(eeg_prcomp)
fviz_eig (eeg_prcomp, addlabels = TRUE)
library(ggcorrplot)
fviz_eig (eeg_prcomp, addlabels = TRUE)
install.packages("FactoMineR")
library(FactoMineR)
fviz_eig (eeg_prcomp, addlabels = TRUE)
install.packages("factoextra")
library(factoextra)
fviz_eig (eeg_prcomp, addlabels = TRUE)
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
eeg_prcomp <- as.data.frame(eeg_prcomp$x)
fviz_eig (eeg_prcomp, addlabels = TRUE)
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
fviz_eig (eeg_prcomp, addlabels = TRUE)
eeg_prcomp_x <- as.data.frame(eeg_prcomp$x)
eeg_prcomp_X$label <- eeg$eyeDetection
eeg_prcomp_x$label <- eeg$eyeDetection
plot(eeg_prcomp_x$PC1,
eeg_prcomp_x$AF3,
col = eeg_prcomp_x$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
legend("bottomright",
legend = levels(eeg_prcomp_x$label),
col = seq_along(levels(eeg_prcomp_x$label)),
pch = 19)
fviz_eig (eeg_prcomp, addlabels = TRUE)
plot(eeg_prcomp_x$PC1,
eeg_prcomp_x$AF3,
col = eeg_prcomp_x$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
legend("bottomright",
legend = levels(eeg_prcomp_x$label),
col = seq_along(levels(eeg_prcomp_x$label)),
pch = 19)
plot(eeg_prcomp_x$PC1,
eeg_prcomp_x$AF3,
col = eeg_prcomp_x$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
log = "x",
xlab="PC1",
ylab="AF3")
legend("bottomright",
legend = levels(eeg_prcomp_x$label),
col = seq_along(levels(eeg_prcomp_x$label)),
pch = 19)
plot(eeg_prcomp_x$PC1,
eeg_prcomp_x$AF3,
col = eeg_prcomp_x$label,
pch = 19,
main="Figure 1: 2D Scatterplot",
log = "y",
xlab="PC1",
ylab="AF3")
legend("bottomright",
legend = levels(eeg_prcomp_x$label),
col = seq_along(levels(eeg_prcomp_x$label)),
pch = 19)
install.packages("MASS")
install.packages("MASS")
data(biopsy)
eeg_prcomp <- prcomp(eeg_variables, scale=TRUE)
View(eeg_prcomp)
# scree plot of variance
fviz_eig (eeg_prcomp, addlabels = TRUE)
# Biplot
fviz_pca_biplot(eeg_prcomp)
eeg_prcomp_x$label <- eeg$eyeDetection
#Biplot with colored groups
fviz_pca_biplot(eeg_prcomp, label = "var", habillage = eeg_prcomp_x$label)
install.packages("caret")
View(eeg)
library(caret)
id <- createDataPartition(eeg$eyeDetection, p = 0.8, list = FALSE)
train = eeg[id, ]
test = eeg[-id, ]
View(train)
cb = class::lvqinit(train[1:4], train$eyeDetection)
# training set in a codebook.
build.cb = class::olvq1(train[1:4], train$eyeDetection, cb)
# classify test set from LVQ Codebook for test data
predict = class::lvqtest(build.cb, test[1:4])
# confusion matrix.
caret::confusionMatrix(test$eyeDetection, predict)
install.packages("randomForest")
library(randomForest)
rf_model <- randomForest(eyeDetection ~ ., data=train, ntree=500, mtry=3, importance = TRUE)
print(rf_model)
predictions <- predict(rf_model, test)
cm <- confusionMatrix(predictions, test$eyeDetection)
cm
savehistory("~/PROJECTS/Time_Series/eeg history.Rhistory")
